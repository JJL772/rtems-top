[arm/xilinx_zynq_a9_qemu]
# Selects the compiler used to build the BSP (allowed values are "gcc" and
# "clang").  Please note that the values of some options depend on the compiler
# selection and changing the compiler may lead to unpredictable behaviour if
# these options are not adjusted as well.  Use the --rtems-compiler command line
# option to get the default values for a particular compiler via
# ./waf bspdefaults.
COMPILER = gcc
# Defines the program prefix of tools (compiler, assembler, linker)
# used to build RTEMS. This option may be used to build RTEMS with a
# vendor tool suite. Please note, support issues related to using this
# option with vendor tool suites should be directed to the vendor of
# the tools.
PROGRAM_PREFIX = ${ARCH}-rtems${__RTEMS_MAJOR__}-
# Flags passed to the library archiver
ARFLAGS = crD
# Warning flags passed to the C and C++ compiler
WARNING_FLAGS = -Wall
# Warning flags passed to the C compiler
CC_WARNING_FLAGS = -Wmissing-prototypes -Wimplicit-function-declaration -Wstrict-prototypes -Wnested-externs
# Warning flags passed to the C++ compiler
CXX_WARNING_FLAGS = 
# Enable the Ada support
__RTEMS_ADA__ = False
# Defines the build label returned by rtems_get_build_label().
RTEMS_BUILD_LABEL = DEFAULT
# Enable the RTEMS internal debug support
RTEMS_DEBUG = False
# Enable the Driver Manager startup
RTEMS_DRVMGR_STARTUP = False
# Enable the Newlib C library support
RTEMS_NEWLIB = True
# Enable the para-virtualization support
RTEMS_PARAVIRT = False
# Enable support for POSIX signals, sporadic server and lio_listio()
RTEMS_POSIX_API = True
# Enable the SMP lock profiling support
RTEMS_PROFILING = False
# Enable the Symmetric Multiprocessing (SMP) support
RTEMS_SMP = False
# Enable the code and branch coverage support.
RTEMS_GCOV_COVERAGE = False
# Compiler flags recommended for components which should generate
# coverage information.
COVERAGE_COMPILER_FLAGS = 
# Linker flags recommended for executables which contain modules which
# generate coverage information.
COVERAGE_LINKER_FLAGS = 
# Build the test programs
BUILD_TESTS = False
# Build the Ada test programs (may be also enabled by BUILD_TESTS)
BUILD_ADATESTS = False
# Build the benchmark programs (may be also enabled by BUILD_TESTS)
BUILD_BENCHMARKS = False
# Build the file system test programs (may be also enabled by
# BUILD_TESTS)
BUILD_FSTESTS = False
# Build the library test programs (may be also enabled by BUILD_TESTS)
BUILD_LIBTESTS = False
# Build the MPCI test programs (may be also enabled by BUILD_TESTS)
BUILD_MPTESTS = False
# Build the POSIX test programs (may be also enabled by BUILD_TESTS)
BUILD_PSXTESTS = False
# Build the POSIX timing test programs (may be also enabled by
# BUILD_TESTS)
BUILD_PSXTMTESTS = False
# Build the Rhealstone benchmark programs (may be also enabled by
# BUILD_TESTS)
BUILD_RHEALSTONE = False
# Build the sample programs (may be also enabled by BUILD_TESTS)
BUILD_SAMPLES = True
# Build the SMP test programs (may be also enabled by BUILD_TESTS)
BUILD_SMPTESTS = False
# Build the single-processor test programs (may be also enabled by
# BUILD_TESTS)
BUILD_SPTESTS = False
# Build the timing test programs (may be also enabled by BUILD_TESTS)
BUILD_TMTESTS = False
# Build the unit test programs (may be also enabled by BUILD_TESTS)
BUILD_UNITTESTS = False
# Build the validation test programs (may be also enabled by
# BUILD_TESTS)
BUILD_VALIDATIONTESTS = False
# Sets the test verbosity of the RTEMS Test Framework.  Valid values
# are "Verbose", "Normal", and "Quiet".  For normal test runs you can
# use a verbosity of "Normal".  If you need a more detailed output,
# then you can set it to "Verbose".  For example, in case a regression
# occurred.  Reducing the verbosity level can significantly reduce the
# test duration especially on targets with a slow serial output
# device.  All verbosity levels produce enough output to notice failed
# test cases.  In particular, the begin and end of test information is
# not affected by the verbosity level.
RTEMS_TEST_VERBOSITY = Normal
# Default optimization flags for C and C++ compilers.
OPTIMIZATION_FLAGS = -O2 -g -fdata-sections -ffunction-sections
# ABI flags
ABI_FLAGS = -march=armv7-a -mthumb -mfpu=neon -mfloat-abi=hard -mtune=cortex-a9
# ARM Cortex-A9 MPCore PERIPHCLK clock frequency in Hz. Set this to
# CPU Clock /2.
BSP_ARM_A9MPCORE_PERIPHCLK = 100000000
# enable data cache
BSP_DATA_CACHE_ENABLED = False
# enable instruction cache
BSP_INSTRUCTION_CACHE_ENABLED = False
# Zynq cpu_1x clock frequency in Hz
ZYNQ_CLOCK_CPU_1X = 111111111
# This sets a mode where the time runs as fast as possible when a
# clock ISR occurs while the IDLE thread is executing.  This can
# significantly reduce simulation times.
CLOCK_DRIVER_USE_FAST_IDLE = True
# Zynq UART clock frequency in Hz
ZYNQ_CLOCK_UART = 50000000
# use interrupt driven mode for console devices (used by default)
ZYNQ_CONSOLE_USE_INTERRUPTS = True
ZYNQ_RAM_INT_0_LENGTH = 0x00030000
ZYNQ_RAM_INT_0_ORIGIN = 0x00000000
ZYNQ_RAM_INT_1_LENGTH = 0x0000fe00
ZYNQ_RAM_INT_1_ORIGIN = 0xffff0000
# If set to true, then the MMU is configured to use small pages
# (4KiB), otherwise it uses sections (1MiB).
ARM_MMU_USE_SMALL_PAGES = False
# length of nocache RAM region
ZYNQ_RAM_NOCACHE_LENGTH = 0x00100000
# override a BSP's default RAM length
ZYNQ_RAM_LENGTH = 0x10000000
ZYNQ_RAM_ORIGIN = 0x00100000
# reset vector address for BSP start
BSP_START_RESET_VECTOR = False
# This option enables the use FIQ interrupts for GIC group 0
# interrupts.  The ARM Generic Interrupt Controller (GIC) variants
# GICv1 with Security Extensions, GICv2 without Security Extensions,
# GICv2 with Security Extensions and in Secure processor mode, GICv3
# and GICv4 in Secure processor mode, GICv3 and GICv4 with
# GICD_CTLR.DS == 1 have the ability to assign group 0 or 1 to
# individual interrupts.  Group 0 interrupts can be configured to
# raise an FIQ exception.  This enables the use of NMIs with respect
# to RTEMS.  Use arm_gic_irq_set_group() to change the group of an
# interrupt (default group is 1, if BSP_ARM_GIC_ENABLE_FIQ_FOR_GROUP_0
# is defined).  To use FIQ interrupts, you have to install an FIQ
# exception handler and enable FIQs in the Current Program Status
# Register (CPSR).
BSP_ARM_GIC_ENABLE_FIQ_FOR_GROUP_0 = True
# Do the clock tick processing on the boot processor on behalf of all
# other processors.
CLOCK_DRIVER_USE_ONLY_BOOT_PROCESSOR = True
# This option defines the Xilinx Zynq UART base address used by the
# kernel I/O device.
ZYNQ_UART_KERNEL_IO_BASE_ADDR = ZYNQ_UART_1_BASE_ADDR
# Optimization flags passed to C and C++ compilers for the BSP.
BSP_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compilers for the CPU kit.
CPUKIT_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compiler for tests.
TEST_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# If defined to a non-zero value, prints the some information in case
# of a fatal error.
BSP_VERBOSE_FATAL_EXTENSION = 1
# Flags passed to the linker.
LINKFLAGS = 
# Flags passed to the linker at the end of the link command.
LDFLAGS = -Wl,--gc-sections
# Install the legacy application Makefile framework.
INSTALL_LEGACY_MAKEFILES = True
# If defined to a non-zero value, prints the exception context when an
# unexpected exception occurs.
BSP_PRINT_EXCEPTION_CONTEXT = 1
# If defined to a non-zero value, reset the board when the application
# exits.
BSP_RESET_BOARD_AT_EXIT = 1
# If defined to a non-zero value, print a message and wait until
# pressed before resetting board when application exits.
BSP_PRESS_KEY_FOR_RESET = 0