[i386/pc686]
# Selects the compiler used to build the BSP (allowed values are "gcc" and
# "clang").  Please note that the values of some options depend on the compiler
# selection and changing the compiler may lead to unpredictable behaviour if
# these options are not adjusted as well.  Use the --rtems-compiler command line
# option to get the default values for a particular compiler via
# ./waf bspdefaults.
COMPILER = gcc
# Defines the program prefix of tools (compiler, assembler, linker)
# used to build RTEMS. This option may be used to build RTEMS with a
# vendor tool suite. Please note, support issues related to using this
# option with vendor tool suites should be directed to the vendor of
# the tools.
PROGRAM_PREFIX = ${ARCH}-rtems${__RTEMS_MAJOR__}-
# Flags passed to the library archiver
ARFLAGS = crD
# Warning flags passed to the C and C++ compiler
WARNING_FLAGS = -Wall
# Warning flags passed to the C compiler
CC_WARNING_FLAGS = -Wmissing-prototypes -Wimplicit-function-declaration -Wstrict-prototypes -Wnested-externs
# Warning flags passed to the C++ compiler
CXX_WARNING_FLAGS = 
# Enable the Ada support
__RTEMS_ADA__ = False
# Defines the build label returned by rtems_get_build_label().
RTEMS_BUILD_LABEL = DEFAULT
# Enable the RTEMS internal debug support
RTEMS_DEBUG = False
# Enable the Driver Manager startup
RTEMS_DRVMGR_STARTUP = False
# Enable the Newlib C library support
RTEMS_NEWLIB = True
# Enable the para-virtualization support
RTEMS_PARAVIRT = False
# Enable support for POSIX signals, sporadic server and lio_listio()
RTEMS_POSIX_API = True
# Enable the SMP lock profiling support
RTEMS_PROFILING = False
# Enable the Symmetric Multiprocessing (SMP) support
RTEMS_SMP = False
# Enable the code and branch coverage support.
RTEMS_GCOV_COVERAGE = False
# Compiler flags recommended for components which should generate
# coverage information.
COVERAGE_COMPILER_FLAGS = 
# Linker flags recommended for executables which contain modules which
# generate coverage information.
COVERAGE_LINKER_FLAGS = 
# Build the test programs
BUILD_TESTS = False
# Build the Ada test programs (may be also enabled by BUILD_TESTS)
BUILD_ADATESTS = False
# Build the benchmark programs (may be also enabled by BUILD_TESTS)
BUILD_BENCHMARKS = False
# Build the file system test programs (may be also enabled by
# BUILD_TESTS)
BUILD_FSTESTS = False
# Build the library test programs (may be also enabled by BUILD_TESTS)
BUILD_LIBTESTS = False
# Build the MPCI test programs (may be also enabled by BUILD_TESTS)
BUILD_MPTESTS = False
# Build the POSIX test programs (may be also enabled by BUILD_TESTS)
BUILD_PSXTESTS = False
# Build the POSIX timing test programs (may be also enabled by
# BUILD_TESTS)
BUILD_PSXTMTESTS = False
# Build the Rhealstone benchmark programs (may be also enabled by
# BUILD_TESTS)
BUILD_RHEALSTONE = False
# Build the sample programs (may be also enabled by BUILD_TESTS)
BUILD_SAMPLES = True
# Build the SMP test programs (may be also enabled by BUILD_TESTS)
BUILD_SMPTESTS = False
# Build the single-processor test programs (may be also enabled by
# BUILD_TESTS)
BUILD_SPTESTS = False
# Build the timing test programs (may be also enabled by BUILD_TESTS)
BUILD_TMTESTS = False
# Build the unit test programs (may be also enabled by BUILD_TESTS)
BUILD_UNITTESTS = False
# Build the validation test programs (may be also enabled by
# BUILD_TESTS)
BUILD_VALIDATIONTESTS = False
# Sets the test verbosity of the RTEMS Test Framework.  Valid values
# are "Verbose", "Normal", and "Quiet".  For normal test runs you can
# use a verbosity of "Normal".  If you need a more detailed output,
# then you can set it to "Verbose".  For example, in case a regression
# occurred.  Reducing the verbosity level can significantly reduce the
# test duration especially on targets with a slow serial output
# device.  All verbosity levels produce enough output to notice failed
# test cases.  In particular, the begin and end of test information is
# not affected by the verbosity level.
RTEMS_TEST_VERBOSITY = Normal
# Default optimization flags for C and C++ compilers.
OPTIMIZATION_FLAGS = -O2 -g -fdata-sections -ffunction-sections
# ABI flags
ABI_FLAGS = -mtune=pentiumpro -march=pentium
# Set the value of RELOCADDR to the address where you want your image
# to load. If you'll be using GRUB to load the images it will have to
# be >= 0x100000 (1024K). If you are using NetBoot to load the images
# it can be >= 0x10000 (64K) AND <= 0x97C00 (607K) OR >= 0x100000
# (1024K). The memory top is of course another limit. Make sure there
# is enough space before the upper memory limits for the image and the
# memory allocated by it to fit. Make sure the value you choose is
# aligned to 4 bytes.
RELOCADDR = 0x00100000
# Defined by default. Enables use of the Vesa Bios Extensions - real
# mode interface, which enables graphical mode and introduce it upon
# bootup.
USE_VBE_RM = True
# If defined, enables use of the Cirrus GD5446 controller rather than
# the controller utilizing Vesa Bios Extensions - real mode interface.
# NOTE: This has only been tested on Qemu.
USE_CIRRUS_GD5446 = False
# None
CLOCK_DRIVER_USE_8254 = False
# None
CLOCK_DRIVER_USE_TSC = False
# Determines, whether the console will be associated with the standard
# VGA display or with the COM1 serial port.  Currently only the VGA
# display and COM1 support printk.
USE_COM1_AS_CONSOLE = False
# Set if COM1..COM4 support is enabled.
BSP_ENABLE_COM1_COM4 = True
# Set if IDE support is enabled.
BSP_ENABLE_IDE = True
# Set if the VGA and keyboard console support is enabled.
BSP_ENABLE_VGA = True
# Defined by default. Enables use of the GDB stub for debugging via a
# serial port.
BSP_GDB_STUB = True
# Determines, whether RTEMS will try to use the primary IDE interface.
# Disable it, if: - you have no primary IDE interface - or you have no
# disk attached to this interface - or you do not want to access disks
# attached to this interface
IDE_USE_PRIMARY_INTERFACE = True
# Determines, whether RTEMS will try to use the secondary IDE
# interface.  Enable it, if: - you have a secondary IDE interface -
# and you have at least one disk attached to this interface - and you
# do want to access disks attached to this interface
IDE_USE_SECONDARY_INTERFACE = False
# If defined, enables use of the very basic VGA driver for framebuffer
# support rather than the controller utilizing Vesa Bios Extensions -
# real mode interface.
USE_VGA = False
# If defined, set the VGA display to 80x50.
BSP_VIDEO_80x50 = False
# Defines how many descriptors in GDT may be allocated for application
# or driver usage.
NUM_APP_DRV_GDT_DESCRIPTORS = 0
# Do the clock tick processing on the boot processor on behalf of all
# other processors.
CLOCK_DRIVER_USE_ONLY_BOOT_PROCESSOR = False
# Optimization flags passed to C and C++ compilers for the BSP.
BSP_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compilers for the CPU kit.
CPUKIT_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# Optimization flags passed to C and C++ compiler for tests.
TEST_OPTIMIZATION_FLAGS = ${OPTIMIZATION_FLAGS}
# If defined to a non-zero value, prints the some information in case
# of a fatal error.
BSP_VERBOSE_FATAL_EXTENSION = 1
# Flags passed to the linker.
LINKFLAGS = 
# Flags passed to the linker at the end of the link command.
LDFLAGS = -Wl,--gc-sections
# Install the legacy application Makefile framework.
INSTALL_LEGACY_MAKEFILES = True
# If defined to a non-zero value, prints the exception context when an
# unexpected exception occurs.
BSP_PRINT_EXCEPTION_CONTEXT = 1
# If defined to a non-zero value, reset the board when the application
# exits.
BSP_RESET_BOARD_AT_EXIT = 1
# If defined to a non-zero value, print a message and wait until
# pressed before resetting board when application exits.
BSP_PRESS_KEY_FOR_RESET = 0
